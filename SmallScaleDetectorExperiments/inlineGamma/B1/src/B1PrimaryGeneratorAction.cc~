//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id$
//
/// \file B1PrimaryGeneratorAction.cc
/// \brief Implementation of the B1PrimaryGeneratorAction class

#include "B1PrimaryGeneratorAction.hh"

#include "G4LogicalVolumeStore.hh"
#include "G4LogicalVolume.hh"
#include "G4Box.hh"
#include "G4RunManager.hh"
#include "G4ParticleGun.hh"
#include "G4ParticleTable.hh"
#include "G4ParticleDefinition.hh"
#include "G4SystemOfUnits.hh"

#include "Randomize.hh"
#include "G4IonTable.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B1PrimaryGeneratorAction::B1PrimaryGeneratorAction()
  : G4VUserPrimaryGeneratorAction(),
    fParticleGun(0), 
    fEnvelopeBox(0)
{
  G4int n_particle = 1;
  fParticleGun  = new G4ParticleGun(n_particle);

  int seed = 28980; //28980
  srand(seed);

  /*

  // default particle kinematic
  G4ParticleTable* particleTable = G4ParticleTable::GetParticleTable();
  G4String particleName;
  G4ParticleDefinition* particle
    = particleTable->FindParticle(particleName="geantino");
  fParticleGun->SetParticleDefinition(particle);
  fParticleGun->SetParticleMomentumDirection(G4ThreeVector(0.,0.,1.));*/
  fParticleGun->SetParticleEnergy(0.*keV);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B1PrimaryGeneratorAction::~B1PrimaryGeneratorAction()
{
  delete fParticleGun;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void B1PrimaryGeneratorAction::GeneratePrimaries(G4Event* anEvent)
{
  //this function is called at the begining of ecah event
  //

  // In order to avoid dependence of PrimaryGeneratorAction
  // on DetectorConstruction class we get Envelope volume
  // from G4LogicalVolumeStore.

  /*
    G4double envSizeXY = 0;
    G4double envSizeZ = 0;

    if (!fEnvelopeBox)
    {
    G4LogicalVolume* envLV
    = G4LogicalVolumeStore::GetInstance()->GetVolume("Envelope");
    if ( envLV ) fEnvelopeBox = dynamic_cast<G4Box*>(envLV->GetSolid());
    }

    if ( fEnvelopeBox ) {
    envSizeXY = fEnvelopeBox->GetXHalfLength()*2.;
    envSizeZ = fEnvelopeBox->GetZHalfLength()*2.;
    }  
    else  {
    G4ExceptionDescription msg;
    msg << "Envelope volume of box shape not found.\n"; 
    msg << "Perhaps you have changed geometry.\n";
    msg << "The gun will be place at the center.";
    G4Exception("B1PrimaryGeneratorAction::GeneratePrimaries()",
    "MyCode0002",JustWarning,msg);
    }

    G4double size = 0.8; 
    G4double x0 = size * envSizeXY * (G4UniformRand()-0.5);
    G4double y0 = size * envSizeXY * (G4UniformRand()-0.5);
    G4double z0 = -0.5 * envSizeZ;
  
    fParticleGun->SetParticlePosition(G4ThreeVector(x0,y0,z0));*/

  bool source = 1;

  if(!source){
    G4double imo, jmo, kmo;

    const double maxDeflection = 90. * M_PI / 180.0; //8.95
    double theta = 2 * M_PI * ((double)std::rand() / RAND_MAX);
    double phi = maxDeflection * ((double)std::rand() / RAND_MAX);

    imo = cos(theta) * sin(phi);
    jmo = sin(theta) * sin(phi);
    kmo = cos(phi);

    //imo = 0;
    //jmo = 0;
    //kmo = 1;

    G4double ipos, jpos, kpos;
    ipos = 0; //-43.4
    jpos = 0;
    kpos = -43.4;

    fPrimaryEnergy = 2.5* ((double)std::rand()/RAND_MAX) * MeV;

    /*
      std::fstream outfile;
      outfile.open("data.csv", std::fstream::in | std::fstream::out 
      | std::fstream::app);
      outfile << priEnergy << ",";
      outfile.close();*/

    //Default energy,position,momentum
    fParticleGun->SetParticleEnergy(fPrimaryEnergy);
    fParticleGun->SetParticlePosition(G4ThreeVector(ipos, jpos, kpos));
    fParticleGun->SetParticleMomentumDirection(G4ThreeVector(imo,jmo,kmo));
  }

  else if(source){
    G4int Z =27;
    G4int A =57;
    G4double charge = 0.*eplus;
    G4double energy = 0.*keV;
    G4ParticleDefinition *ion =
      G4IonTable::GetIonTable()->GetIon(Z, A, energy);
    fParticleGun->SetParticleDefinition(ion);
    fParticleGun->SetParticleCharge(charge);

    G4double ipos, jpos, kpos;
    ipos = 0; //-43.4
    jpos = 0;
    kpos = -8.5; //-8.5
    
    fParticleGun->SetParticlePosition(G4ThreeVector(ipos, jpos, kpos));
  }
  
  fParticleGun->GeneratePrimaryVertex(anEvent);

  
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

